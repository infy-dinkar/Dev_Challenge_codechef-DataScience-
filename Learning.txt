üìù Pandas Notes ‚Äì unique(), nunique(), value_counts()

==================================================
Sample DataFrame Creation
==================================================

import pandas as pd

# Create a small sample DataFrame
data = {
    "Text": ["Hello", "Bonjour", "Hola", "Salut", "Namaste", "Hello", "Hola"],
    "Language": ["English", "French", "Spanish", "French", "Hindi", "English", "Spanish"]
}

df = pd.DataFrame(data)
print("Sample DataFrame:")
print(df)

# Output:
#       Text Language
# 0    Hello  English
# 1  Bonjour   French
# 2     Hola  Spanish
# 3    Salut   French
# 4  Namaste    Hindi
# 5    Hello  English
# 6     Hola  Spanish


==================================================
unique()
==================================================

print(df['Language'].unique())

# Output:
# ['English' 'French' 'Spanish' 'Hindi']


==================================================
nunique()
==================================================

print(df['Language'].nunique())

# Output:
# 4


==================================================
value_counts()
==================================================

print(df['Language'].value_counts())

# Output:
# English    2
# French     2
# Spanish    2
# Hindi      1
# Name: Language, dtype: int64


==================================================
value_counts(normalize=True)
==================================================

print(df['Language'].value_counts(normalize=True) * 100)

# Output:
# English    28.571429
# French     28.571429
# Spanish    28.571429
# Hindi      14.285714
# Name: Language, dtype: float64


==================================================
üìå Quick Summary
==================================================
- unique() ‚Üí List of distinct values (NumPy array)
- nunique() ‚Üí Number of distinct values (int)
- value_counts() ‚Üí Frequency of each unique value (Series)
- value_counts(normalize=True) ‚Üí Percentage distribution

============================================********************************======================================


üìù Pandas Notes ‚Äì strip()

==================================================
Sample DataFrame Creation
==================================================

import pandas as pd

# Create a small sample DataFrame
data = {
    "Text": ["   Hello   ", " Bonjour", "Hola   ", "  Salut", "Namaste  "]
}

df = pd.DataFrame(data)
print("Sample DataFrame:")
print(df)

# Output:
#          Text
# 0     "   Hello   "
# 1     " Bonjour"
# 2     "Hola   "
# 3     "  Salut"
# 4     "Namaste  "


==================================================
strip() ‚Üí Remove leading & trailing spaces
==================================================

df['Text_stripped'] = df['Text'].str.strip()
print(df)

# Output:
#          Text Text_stripped
# 0     "   Hello   "       "Hello"
# 1     " Bonjour"          "Bonjour"
# 2     "Hola   "           "Hola"
# 3     "  Salut"           "Salut"
# 4     "Namaste  "         "Namaste"


==================================================
lstrip() ‚Üí Remove only leading spaces
==================================================

df['Text_lstripped'] = df['Text'].str.lstrip()
print(df)

# Output:
#          Text Text_lstripped
# 0     "   Hello   "     "Hello   "
# 1     " Bonjour"        "Bonjour"
# 2     "Hola   "         "Hola   "
# 3     "  Salut"         "Salut"
# 4     "Namaste  "       "Namaste  "


==================================================
rstrip() ‚Üí Remove only trailing spaces
==================================================

df['Text_rstripped'] = df['Text'].str.rstrip()
print(df)

# Output:
#          Text Text_rstripped
# 0     "   Hello   "     "   Hello"
# 1     " Bonjour"        " Bonjour"
# 2     "Hola   "         "Hola"
# 3     "  Salut"         "  Salut"
# 4     "Namaste  "       "Namaste"


==================================================
üìå Quick Summary
==================================================
- strip() ‚Üí Removes spaces from both ends
- lstrip() ‚Üí Removes spaces only from left side
- rstrip() ‚Üí Removes spaces only from right side

================================================*************=====================================================




.str.upper() ‚Üí Converts all text to UPPERCASE

.str.lower() ‚Üí Converts all text to lowercase

.str.title() ‚Üí Capitalizes the first letter of each word

================================================**************====================================================
üìù Regex in Data Analysis with `import re`

==================================================
1. Importing regex
==================================================

import re


==================================================
2. Finding all numbers in a text (retrieving numbers)
==================================================

text = "Order123 has 45 apples and 6789 bananas."
numbers = re.findall(r'\d+', text)   # \d+ ‚Üí one or more digits
print(numbers)

# Output:
# ['123', '45', '6789']

‚úÖ Useful when you want to extract IDs, prices, quantities.


==================================================
3. Deleting all numbers from text
==================================================

text = "My phone number is 9876543210"
cleaned_text = re.sub(r'\d+', '', text)
print(cleaned_text)

# Output:
# "My phone number is "

‚úÖ Helps when you want only text data, without numeric noise.


==================================================
4. Extracting words (ignoring numbers & symbols)
==================================================

text = "Python3 is #1 in 2025!"
words = re.findall(r'[A-Za-z]+', text)
print(words)

# Output:
# ['Python', 'is', 'in']

‚úÖ Gets only alphabetical words.


==================================================
5. Removing extra spaces
==================================================

text = "Data     Science   is   fun"
cleaned = re.sub(r'\s+', ' ', text).strip()
print(cleaned)

# Output:
# "Data Science is fun"

‚úÖ Normalizes messy spacing.


==================================================
6. Extracting emails
==================================================

text = "Contact us at support@gmail.com or info@iitg.ac.in"
emails = re.findall(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}', text)
print(emails)

# Output:
# ['support@gmail.com', 'info@iitg.ac.in']


==================================================
7. Extracting hashtags
==================================================

text = "Loving #DataScience and #AI"
hashtags = re.findall(r'#\w+', text)
print(hashtags)

# Output:
# ['#DataScience', '#AI']


==================================================
üìå Quick Summary
==================================================
- \d+ ‚Üí Extract numbers
- re.sub(r'\d+', '', text) ‚Üí Remove numbers
- [A-Za-z]+ ‚Üí Extract only words
- \s+ ‚Üí Normalize spaces
- Email regex ‚Üí Extract email IDs
- #\w+ ‚Üí Extract hashtags


=============================================*************========================================================


==================================================
1. Dropping rows with missing text
==================================================

data.dropna(subset=['Text'], inplace=True)

üëâ Removes rows where the column "Text" has missing values (NaN).

* subset=['Text'] ‚Üí Only check the Text column.
* inplace=True ‚Üí Apply changes directly to the dataframe.

Example:

import pandas as pd

df = pd.DataFrame({
    "Text": ["Hello", None, "World"],
    "Lang": ["en", "fr", "en"]
})

df.dropna(subset=['Text'], inplace=True)
print(df)

Output:

    Text  Lang
0  Hello    en
2  World    en

‚úÖ Row with None in Text was dropped.


==================================================
2. Converting column to string type
==================================================

data['Text'] = data['Text'].astype(str)

üëâ Ensures all values in "Text" are strings, even if they were numbers or floats.

Example:

df = pd.DataFrame({
    "Text": [123, "Hello", 45.6],
    "Lang": ["en", "en", "en"]
})

df['Text'] = df['Text'].astype(str)
print(df.dtypes)

Output:

Text    object
Lang    object
dtype: object

‚úÖ Now every value in "Text" is treated as a string.


==================================================
3. Applying a cleaning function
==================================================

data['Cleaned_Text'] = data['Text'].apply(preprocess_text)

üëâ Applies a custom function to each row in "Text" and saves results in "Cleaned_Text".

Example:

def preprocess_text(text):
    return text.lower()

df = pd.DataFrame({
    "Text": ["HELLO WORLD", "Python IS Fun"]
})

df["Cleaned_Text"] = df["Text"].apply(preprocess_text)
print(df)

Output:

             Text   Cleaned_Text
0    HELLO WORLD    hello world
1  Python IS Fun  python is fun

‚úÖ Text is processed row by row.


==================================================
4. Saving dataframe to CSV
==================================================

data.to_csv("cleaned.csv", index=False)

üëâ Saves dataframe to a CSV file.

* index=False ‚Üí avoids writing row numbers to the file.

Example CSV content:

Text,Cleaned_Text
HELLO WORLD,hello world
Python IS Fun,python is fun

‚úÖ Only data is saved, no extra index column.


==================================================
üìå Quick Summary
==================================================
* dropna(subset=['Text']) ‚Üí Remove rows with missing text.
* astype(str) ‚Üí Convert all values to string.
* .apply(preprocess_text) ‚Üí Run a cleaning function on each row.
* .to_csv(index=False) ‚Üí Save cleaned data without extra index column.




